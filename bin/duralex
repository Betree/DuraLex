#!/usr/bin/env python
# -*- coding=utf-8 -*-

import codecs
import os
import json
import sys
import argparse
import urllib

sys.path.append(os.path.join(os.path.realpath(os.path.dirname(__file__)), '..'))

import duralex.alinea_parser
import duralex.bill_parser
from duralex.DeleteEmptyChildrenVisitor import DeleteEmptyChildrenVisitor
from duralex.DeleteParentVisitor import DeleteParentVisitor
from duralex.DeleteUUIDVisitor import DeleteUUIDVisitor
from duralex.ForkReferenceVisitor import ForkReferenceVisitor
from duralex.SortReferencesVisitor import SortReferencesVisitor
from duralex.ResolveFullyQualifiedReferencesVisitor import ResolveFullyQualifiedReferencesVisitor
from duralex.ResolveFullyQualifiedDefinitionsVisitor import ResolveFullyQualifiedDefinitionsVisitor
from duralex.AddArcheoLexFilenameVisitor import AddArcheoLexFilenameVisitor
from duralex.AddDiffVisitor import AddDiffVisitor
from duralex.RemoveQuotePrefixVisitor import RemoveQuotePrefixVisitor
from duralex.AddCommitMessageVisitor import AddCommitMessageVisitor
from duralex.GitCommitVisitor import GitCommitVisitor
from duralex.AddGitHubIssueVisitor import AddGitHubIssueVisitor
from duralex.ApplyPatchVisitor import ApplyPatchVisitor

def handle_data(data, args):
    if data[0] == u'{':
        data = json.loads(data)
    else:
        data = duralex.bill_parser.parse_bill(data, args.url)
    ast = duralex.alinea_parser.parse_json_data(data)

    ForkReferenceVisitor().visit(ast)
    ResolveFullyQualifiedDefinitionsVisitor().visit(ast)
    ResolveFullyQualifiedReferencesVisitor().visit(ast)
    SortReferencesVisitor().visit(ast)
    RemoveQuotePrefixVisitor().visit(ast)

    if args.commit_message:
        AddCommitMessageVisitor().visit(ast)

    DeleteParentVisitor().visit(ast)
    DeleteEmptyChildrenVisitor().visit(ast)

    if not args.uuid:
        DeleteUUIDVisitor().visit(ast)

    if args.diff:
        AddArcheoLexFilenameVisitor().visit(ast)
        AddDiffVisitor().visit(ast)

    if args.github_token and args.github_repository:
        AddGitHubIssueVisitor(args).visit(ast)

    if args.patch:
        ApplyPatchVisitor().visit(ast)

    if args.git_commit:
        GitCommitVisitor().visit(ast)

    if not args.quiet:
        json_data = json.dumps(ast, sort_keys=True, indent=2, ensure_ascii=False).encode('utf-8')
        sys.stdout.write(json_data)

def main(argv=None):
    parser = argparse.ArgumentParser(prog='duralex')
    parser.add_argument('--file', help='the path of the bill to process', type=argparse.FileType('r'), default='-')
    parser.add_argument('--url', help='the URL of the bill to process')
    parser.add_argument('--quiet', action='store_true', help='no stdout output')
    parser.add_argument('--uuid', action='store_true', help='add a unique ID on each node')
    parser.add_argument('--diff', action='store_true', help='compute a diff for each edit')
    parser.add_argument('--patch', action='store_true', help='patch the original files according to the generated diff')
    parser.add_argument('--git-commit', action='store_true', help='git commit each edit')
    parser.add_argument('--commit-message', action='store_true', help='generate a commit message for each edit')
    parser.add_argument('--github-token', help='the GitHub API token')
    parser.add_argument('--github-repository', help='the target GitHub repository')

    args = parser.parse_args()

    if args.url:
        data = urllib.urlopen(args.url).read()
    elif args.file:
        data = args.file.read()

    # For some reason, the &nbsp; HTML entity will break the decoding.
    data = data.replace('&nbsp;', ' ')

    try:
        data = data.decode('utf8')
    except:
        try:
            data = data.decode('iso-8859-1')
        except:
            pass

    handle_data(data, args)

    return 0

if __name__ == "__main__":
    sys.exit(main())
